
import java.util.ArrayList;
import java.util.Scanner;

public class atm_inerface {

    private static ArrayList<User> users = new ArrayList<>();
    private static User currentUser;

    public static void main(String[] args) {
        users.add(new User("user123", "1234", 1000.0));
        users.add(new User("user456", "4567", 500.0));
        users.add(new User("user789", "7890", 2000.0));

        Scanner sc = new Scanner(System.in);

        System.out.println("Welcome to the ATM System");
        System.out.print("User ID: ");
        String userId = sc.nextLine();
        System.out.print("PIN: ");
        String pin = sc.nextLine();

        if (!authenticate(userId, pin)) {
            System.out.println("Invalid credentials. Exiting.");
            return;
        }

        while (true) {
            System.out.println("\n1. History 2. Withdraw 3. Deposit 4. Transfer 5. Quit");
            System.out.print("Choose: ");
            switch (sc.nextInt()) {
                case 1 ->
                    currentUser.showHistory();
                case 2 ->
                    currentUser.withdraw(sc);
                case 3 ->
                    currentUser.deposit(sc);
                case 4 ->
                    transfer(sc);
                case 5 -> {
                    System.out.println("Goodbye!");
                    return;
                }
                default ->
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    private static boolean authenticate(String userId, String pin) {
        for (User user : users) {
            if (user.getUserId().equals(userId) && user.getPin().equals(pin)) {
                currentUser = user;
                return true;
            }
        }
        return false;
    }

    private static void transfer(Scanner sc) {
        System.out.print("Enter recipient ID: ");
        String recipientId = sc.next();
        System.out.print("Enter amount to transfer: ");
        double amount = sc.nextDouble();

        for (User user : users) {
            if (user.getUserId().equals(recipientId)) {
                if (currentUser.transfer(user, amount)) {
                    System.out.println("Transfer successful. Remaining balance: $" + currentUser.getBalance());
                } else {
                    System.out.println("Invalid amount or insufficient balance.");
                }
                return;
            }
        }
        System.out.println("Recipient not found.");
    }
}

class User {

    private String userId;
    private String pin;
    private double balance;
    private ArrayList<String> history;

    public User(String userId, String pin, double balance) {
        this.userId = userId;
        this.pin = pin;
        this.balance = balance;
        this.history = new ArrayList<>();
    }

    public String getUserId() {
        return userId;
    }

    public String getPin() {
        return pin;
    }

    public double getBalance() {
        return balance;
    }

    public void showHistory() {
        if (history.isEmpty()) {
            System.out.println("No transactions yet.");
        } else {
            System.out.println("Transaction History:");
            history.forEach(System.out::println);
        }
    }

    public void withdraw(Scanner sc) {
        System.out.print("Enter amount to withdraw: ");
        double amount = sc.nextDouble();
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            history.add("Withdrawn: $" + amount);
            System.out.println("Withdrawal successful. Remaining balance: $" + balance);
        } else {
            System.out.println("Invalid amount or insufficient balance.");
        }
    }

    public void deposit(Scanner sc) {
        System.out.print("Enter amount to deposit: ");
        double amount = sc.nextDouble();
        if (amount > 0) {
            balance += amount;
            history.add("Deposited: $" + amount);
            System.out.println("Deposit successful. Current balance: $" + balance);
        } else {
            System.out.println("Invalid amount.");
        }
    }

    public boolean transfer(User recipient, double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            recipient.balance += amount;
            history.add("Transferred $" + amount + " to " + recipient.userId);
            recipient.history.add("Received $" + amount + " from " + userId);
            return true;
        }
        return false;
    }
}
